{
    "primitives": [
        "pandas.DataFrame.pop",
        "pandas.DataFrame.pop",
        "sklearn.impute.SimpleImputer",
        "sklearn.preprocessing.MinMaxScaler",
        "pandas.DataFrame",
        "pandas.DataFrame.set",
        "pandas.DataFrame.set",
        "mlstars.custom.timeseries_preprocessing.cutoff_window_sequences",
        "keras.Sequential.LSTMTimeSeriesClassifier",
        "numpy.take"
    ],
    "init_params": {
        "pandas.DataFrame.pop#1": {
            "item": "turbine_id"
        },
        "pandas.DataFrame.pop#2": {
            "item": "timestamp"
        },
        "sklearn.preprocessing.MinMaxScaler#1": {
            "feature_range": [
                -1,
                1
            ]
        },
        "pandas.DataFrame#1": {
            "index": null,
            "columns": null
        },
        "pandas.DataFrame.set#1": {
            "key": "turbine_id"
        },
        "pandas.DataFrame.set#2": {
            "key": "timestamp"
        },
        "mlstars.custom.timeseries_preprocessing.cutoff_window_sequences#1": {
            "window_size": 24,
            "cutoff_time": "cutoff_time",
            "time_index": "timestamp"
        },
        "keras.Sequential.LSTMTimeSeriesClassifier#1": {
            "epochs": 35,
            "verbose": false,
            "classification": false,
            "loss": "keras.losses.binary_crossentropy"
        },
        "numpy.take#1": {
            "indices": 1,
            "axis": 1
        }
    },
    "input_names": {
        "pandas.DataFrame.pop#1": {
            "X": "readings"
        },
        "pandas.DataFrame.pop#2": {
            "X": "readings"
        },
        "sklearn.impute.SimpleImputer#1": {
            "X": "readings"
        },
        "sklearn.preprocessing.MinMaxScaler#1": {
            "X": "readings"
        },
        "pandas.DataFrame#1": {
            "X": "readings"
        },
        "pandas.DataFrame.set#1": {
            "X": "readings",
            "value": "turbine_id"
        },
        "pandas.DataFrame.set#2": {
            "X": "readings",
            "value": "timestamp"
        },
        "mlstars.custom.timeseries_preprocessing.cutoff_window_sequences#1": {
            "timeseries": "readings"
        }
    },
    "output_names": {
        "pandas.DataFrame.pop#1": {
            "item": "turbine_id"
        },
        "pandas.DataFrame.pop#2": {
            "item": "timestamp"
        },
        "sklearn.impute.SimpleImputer#1": {
            "X": "readings"
        },
        "sklearn.preprocessing.MinMaxScaler#1": {
            "X": "readings"
        },
        "pandas.DataFrame#1": {
            "X": "readings"
        }
    }
}
